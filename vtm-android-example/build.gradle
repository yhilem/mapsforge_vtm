apply plugin: 'com.android.application'

dependencies {
    implementation project(':vtm-android')
    implementation project(':vtm-android-mvt')
    implementation project(':vtm-extras')
    implementation project(':vtm-http')
    implementation project(':vtm-jeo')
    implementation project(':vtm-json')
    implementation project(':vtm-jts')
    implementation project(':vtm-mvt')
    implementation project(':vtm-themes')
    implementation "org.slf4j:slf4j-android:$slf4jVersion"

    implementation project(':vtm-android-gdx')
    implementation project(':vtm-gdx')
    implementation project(':vtm-gdx-poi3d')

    implementation 'org.mapsforge:mapsforge-poi-android:0.18.0'
    implementation 'org.mapsforge:sqlite-android:0.18.0:natives-armeabi-v7a'
    implementation 'org.mapsforge:sqlite-android:0.18.0:natives-arm64-v8a'
    implementation 'org.mapsforge:sqlite-android:0.18.0:natives-x86'
    implementation 'org.mapsforge:sqlite-android:0.18.0:natives-x86_64'
}

android {
    compileSdk androidCompileSdk()

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        versionCode project.versionCode()
        versionName project.versionName()
        minSdk androidMinSdk()
        targetSdk androidTargetSdk()
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            file("${rootDir}/vtm-android/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
            file("${rootDir}/vtm-android-gdx/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lint {
        abortOnError false
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/services/io.jeo.data.Driver', 'META-INF/LICENSE', 'META-INF/NOTICE']
        }
    }

    /*buildTypes {
        all {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }*/
}

task run(dependsOn: 'installDebug') {
    doFirst {
        println(">> adb run...")
        String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
        String cmd = "${adb} shell am start -n org.oscim.android.test/.Samples"
        def proc = cmd.execute()
        proc.in.eachLine { line -> println line }
        proc.err.eachLine { line -> System.err.println('ERROR: ' + line) }
        proc.waitFor()
    }
}
